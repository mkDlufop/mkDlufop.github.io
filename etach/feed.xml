<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-02-14T19:26:03+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">mkDlufop`s blog</title><author><name>mkDlufop</name></author><entry><title type="html">/dev/sda*:clean,*/*files,*/*blocks</title><link href="http://localhost:4000/2022-02-13-ubuntu-dev-sda11-startup-error/" rel="alternate" type="text/html" title="/dev/sda*:clean,*/*files,*/*blocks" /><published>2022-02-13T00:00:00+08:00</published><updated>2022-02-13T00:00:00+08:00</updated><id>http://localhost:4000/ubuntu-dev-sda11-startup-error</id><content type="html" xml:base="http://localhost:4000/2022-02-13-ubuntu-dev-sda11-startup-error/">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;系统版本：Ubuntu 20.04.3 LTS&lt;/p&gt;

&lt;p&gt;系统睡眠后进入登陆页面输入密码登陆，密码输入框无法选中，导致密码无法输入，随后多次强制重启。多次强制重启后，系统还是处于黑屏状态，最上面有一行：/dev/sda*:clean, */*files, */*blocks	(以上*为数字)。所幸可以通过ctrl+alt+f1~f8进入到tty界面，只是无法进入GUI界面。&lt;/p&gt;

&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;

&lt;p&gt;通过查询资料总结了以下三种方案。&lt;/p&gt;

&lt;p&gt;方案一：重装Nvidia驱动。&lt;/p&gt;

&lt;p&gt;方案二：清理存储空间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;方案三：重装GUI。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1，sudo apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--reinstall&lt;/span&gt; ubuntu-desktop

2，reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于所用到的物理机无Nvidia显卡且剩余存储空间足够大，故采用方案三。&lt;/p&gt;

&lt;h3 id=&quot;参考资料&quot;&gt;参考资料&lt;/h3&gt;

&lt;p&gt;[1] https://askubuntu.com/questions/882385/dev-sda1-clean-this-message-appears-after-i-startup-my-laptop-then-it-w&lt;/p&gt;

&lt;p&gt;[2] https://askubuntu.com/questions/1198488/dev-sda2-clean-files-blocks&lt;/p&gt;</content><author><name>mkDlufop</name></author><category term="Linux" /><summary type="html">前言</summary></entry><entry><title type="html">双系统下时间显示不对（Windows+Linux）</title><link href="http://localhost:4000/2022-01-04-ubuntu-time-out-of-sync/" rel="alternate" type="text/html" title="双系统下时间显示不对（Windows+Linux）" /><published>2022-01-04T00:00:00+08:00</published><updated>2022-01-04T00:00:00+08:00</updated><id>http://localhost:4000/ubuntu-time-out-of-sync</id><content type="html" xml:base="http://localhost:4000/2022-01-04-ubuntu-time-out-of-sync/">&lt;h3 id=&quot;前置知识&quot;&gt;前置知识&lt;/h3&gt;

&lt;p&gt;Windows与类Unix系统默认的时间管理方式：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;：本地时间（local time）=计算机硬件时间=BIOS中显示的时间。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类Unix系统&lt;/strong&gt;：本地时间（local time）=计算机硬件时间+系统设置的时区数=BIOS时间+系统设置的时区数。类Unix系统会把BIOS时间当成UTC，所以待系统启动后，系统显示的时间为BIOS时间+系统设置的时区数。&lt;/p&gt;

&lt;h3 id=&quot;双系统下时间显示不对的原因&quot;&gt;双系统下时间显示不对的原因&lt;/h3&gt;

&lt;p&gt;Windows与类Unix系统默认的时间管理方式不同。假设现在是13点，Ubuntu设置的时区在中国，那么Ubuntu里会显示13点，此时BIOS里的时间是5点。然后切换到Windows，会发现时间不对。因为Windows以BIOS中显示的时间为本地时间，所以此时Windows中显示的时间为5点。在Windows里同步时间，此时时间会显示为13点，BIOS的时间会被改为13点。之后再切换到Ubuntu下，会发现显示的时间变成了21点。&lt;/p&gt;

&lt;h3 id=&quot;解决方案&quot;&gt;解决方案&lt;/h3&gt;

&lt;p&gt;方案一：&lt;/p&gt;

&lt;p&gt;1，先在Ubuntu下更新时间：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ntpdate
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ntpdate time.windows.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2，将系统时间同步到硬件上：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hwclock &lt;span class=&quot;nt&quot;&gt;--localtime&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--systohc&lt;/span&gt; // &lt;span class=&quot;nt&quot;&gt;--systohc&lt;/span&gt; 系统时钟和硬件时钟同步
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方案二：&lt;/p&gt;

&lt;p&gt;在Ubuntu中把计算机硬件的时间改成系统显示时间，即禁用Ubuntu中的UTC。&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;timedatectl set-local-rtc 1 &lt;span class=&quot;nt&quot;&gt;--adjust-system-clock&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>mkDlufop</name></author><category term="Linux" /><summary type="html">前置知识 Windows与类Unix系统默认的时间管理方式： Windows：本地时间（local time）=计算机硬件时间=BIOS中显示的时间。 类Unix系统：本地时间（local time）=计算机硬件时间+系统设置的时区数=BIOS时间+系统设置的时区数。类Unix系统会把BIOS时间当成UTC，所以待系统启动后，系统显示的时间为BIOS时间+系统设置的时区数。 双系统下时间显示不对的原因 Windows与类Unix系统默认的时间管理方式不同。假设现在是13点，Ubuntu设置的时区在中国，那么Ubuntu里会显示13点，此时BIOS里的时间是5点。然后切换到Windows，会发现时间不对。因为Windows以BIOS中显示的时间为本地时间，所以此时Windows中显示的时间为5点。在Windows里同步时间，此时时间会显示为13点，BIOS的时间会被改为13点。之后再切换到Ubuntu下，会发现显示的时间变成了21点。 解决方案 方案一： 1，先在Ubuntu下更新时间： sudo apt install ntpdate sudo ntpdate time.windows.com 2，将系统时间同步到硬件上： sudo hwclock --localtime --systohc // --systohc 系统时钟和硬件时钟同步 方案二： 在Ubuntu中把计算机硬件的时间改成系统显示时间，即禁用Ubuntu中的UTC。 timedatectl set-local-rtc 1 --adjust-system-clock</summary></entry><entry><title type="html">tmux配置</title><link href="http://localhost:4000/2021-09-16-tmux-configurations/" rel="alternate" type="text/html" title="tmux配置" /><published>2021-09-16T00:00:00+08:00</published><updated>2021-09-16T00:00:00+08:00</updated><id>http://localhost:4000/tmux-configurations</id><content type="html" xml:base="http://localhost:4000/2021-09-16-tmux-configurations/">&lt;pre&gt;&lt;code class=&quot;language-tmux&quot;&gt;.tmux.conf

#================================================================
# General
#================================================================
bind-key c new-window -c &quot;#{pane_current_path}&quot;
bind-key % split-window -h -c &quot;#{pane_current_path}&quot;
bind-key '&quot;' split-window -c &quot;#{pane_current_path}&quot;

set -g history-limit 5000 # boast history

# 修改.tumx.conf后使其生效的两种方法：
#	1，重启tmux
#	2，在tmux窗口下，先按下C-b + :，进入到命令模式后输入source-file ~/.tmux.conf，回车后生效。
# 绑定修改.tmux.conf后使其生效的快捷键为r.
bind r source-file ~/.tmux.conf \; display-message &quot;Config reloaded..&quot;

# 开启鼠标支持
set-option -g mouse on

set -g default-terminal &quot;tmux-256color&quot;

# 关闭默认的rename机制
setw -g automatic-rename off
setw -g allow-rename off 

set -g set-titles on
set -g monitor-activity on
set -g visual-activity on

#================================================================
# HotKeys
#================================================================
# change the default prefix binding of C-b to C-a.
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# 分割面板
bind - split-window -h
bind _ split-window -v

# 绑定hjkl为面板切换的上下左右键
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# 绑定Ctrl+hjkl为面板上下左右调整边缘的快捷键
bind -r ^k resizep -U 5 # 绑定Ctrl+K为往上调整面板边缘5个单元格
bind -r ^j resizep -D 5 # 绑定Ctrl+J为往下调整面板边缘5个单元格
bind -r ^h resizep -L 5 # 绑定Ctrl+H为往左调整面板边缘5个单元格
bind -r ^l resizep -R 5 # 绑定Ctrl+L为往右调整面板边缘5个单元格

#================================================================
# Appearance
#================================================================
set -g base-index 1 # 设置窗口的起始下标为1
set -g pane-base-index 1 # 设置面板的起始下标为1

# 设置状态栏的颜色
set -g status-fg white
set -g status-bg black
# 设置状态栏左侧的内容和颜色
set -g status-left-length 40
set -g status-left &quot;#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P&quot;
# 设置状态栏右侧的内容和颜色
# 15% | 28 Nov 18:15
set -g status-right &quot;#(~/battery Discharging) | #[fg=cyan]%d %b %R&quot;
# 每 60 秒更新一次状态栏
set -g status-interval 60

# 设置窗口列表居中显示
set -g status-justify centre

&lt;/code&gt;&lt;/pre&gt;</content><author><name>mkDlufop</name></author><category term="tmux" /><summary type="html">.tmux.conf #================================================================ # General #================================================================ bind-key c new-window -c &quot;#{pane_current_path}&quot; bind-key % split-window -h -c &quot;#{pane_current_path}&quot; bind-key '&quot;' split-window -c &quot;#{pane_current_path}&quot; set -g history-limit 5000 # boast history # 修改.tumx.conf后使其生效的两种方法： # 1，重启tmux # 2，在tmux窗口下，先按下C-b + :，进入到命令模式后输入source-file ~/.tmux.conf，回车后生效。 # 绑定修改.tmux.conf后使其生效的快捷键为r. bind r source-file ~/.tmux.conf \; display-message &quot;Config reloaded..&quot; # 开启鼠标支持 set-option -g mouse on set -g default-terminal &quot;tmux-256color&quot; # 关闭默认的rename机制 setw -g automatic-rename off setw -g allow-rename off set -g set-titles on set -g monitor-activity on set -g visual-activity on #================================================================ # HotKeys #================================================================ # change the default prefix binding of C-b to C-a. unbind C-b set -g prefix C-a bind C-a send-prefix # 分割面板 bind - split-window -h bind _ split-window -v # 绑定hjkl为面板切换的上下左右键 bind -r k select-pane -U bind -r j select-pane -D bind -r h select-pane -L bind -r l select-pane -R # 绑定Ctrl+hjkl为面板上下左右调整边缘的快捷键 bind -r ^k resizep -U 5 # 绑定Ctrl+K为往上调整面板边缘5个单元格 bind -r ^j resizep -D 5 # 绑定Ctrl+J为往下调整面板边缘5个单元格 bind -r ^h resizep -L 5 # 绑定Ctrl+H为往左调整面板边缘5个单元格 bind -r ^l resizep -R 5 # 绑定Ctrl+L为往右调整面板边缘5个单元格 #================================================================ # Appearance #================================================================ set -g base-index 1 # 设置窗口的起始下标为1 set -g pane-base-index 1 # 设置面板的起始下标为1 # 设置状态栏的颜色 set -g status-fg white set -g status-bg black # 设置状态栏左侧的内容和颜色 set -g status-left-length 40 set -g status-left &quot;#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P&quot; # 设置状态栏右侧的内容和颜色 # 15% | 28 Nov 18:15 set -g status-right &quot;#(~/battery Discharging) | #[fg=cyan]%d %b %R&quot; # 每 60 秒更新一次状态栏 set -g status-interval 60 # 设置窗口列表居中显示 set -g status-justify centre</summary></entry><entry><title type="html">一些语录</title><link href="http://localhost:4000/2021-09-15-some-quotes/" rel="alternate" type="text/html" title="一些语录" /><published>2021-09-15T00:00:00+08:00</published><updated>2021-09-15T00:00:00+08:00</updated><id>http://localhost:4000/some-quotes</id><content type="html" xml:base="http://localhost:4000/2021-09-15-some-quotes/">&lt;blockquote&gt;
  &lt;p&gt;​	人生虽然充满痛苦，却并不悲观。正是因为有了这受之不尽的痛苦。人的精神才最大范围的得以解放。痛苦磨炼人的意志，痛苦解放人的心灵，痛苦激发人的生机，痛苦增强人的生命力。而人正是在痛苦以及征服痛苦的战斗中，才最高限度地享受了生命。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	永远年轻，永远热泪盈眶。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	成长是一个不断得到，但更是一个不断失去的过程。一个人是这样，一个家庭是这样，一个时代也是这样。在吴华超的记忆里，童年的杨桃树和火鸡已经成为了永远无法回归的过去，就仿佛奔驰而过的时光列车，呼啸而过，一去不返。在青春这片空旷的原野上，在故乡这片空旷的原野上，给我们留下的还有些什么？是一截闪亮的铁轨，还是无尽的奔跑？&lt;/p&gt;

  &lt;p&gt;​	吴华超告诉我们，是奔跑。因为不灭的梦想还在前方，新的家园也在前方。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	旧时光就如同一只飘忽不定的蝴蝶，萦绕在记忆中，却始终难以捉住。我们对于旧时光的追忆，往往伴随着怀旧的阵痛和淡淡的乡愁。这份乡愁不仅仅是指对远离了的故土的思念，更包含了对离自己而去的那些往日情感的缅怀。那时自己永远也无法再回去的情感的故乡，精神的家园，因而，每每忆及，都免不了心生感慨。&lt;/p&gt;

  &lt;p&gt;​	刘蕴仪通过对自己与亲人之间的往事的追忆，向我们生动地展示了她心中的那只捉不住的蝴蝶，让人更加珍惜当下的美好——不要让每一只蝴蝶，都飞进回忆的花海，再也回不来了。&lt;/p&gt;

  &lt;p&gt;​	那一只捉不住的蝴蝶，也将永远飞舞在我心间。生命中一些见证成长的本质并不会被遗忘，相反，在时间的淘洗中，它们愈会迸发出熠熠的光彩，照亮我今后的岁月征程，成为离心口最近的那一缕不散的情思。&lt;/p&gt;

  &lt;p&gt;​	那一只捉不住的蝴蝶，那些消逝的人们的影像，在远离的同时亦用他们的背影诠释这最大的智慧。与其追悔过去，不如珍惜此时此刻，凭着良知与包容，尝试原谅与宽恕。&lt;/p&gt;

  &lt;p&gt;​	不然，我们只能在岁月的末尾，带着沉重的叹息，慢慢地转过身，步履蹒跚地离开。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	怀旧的人，就像一只风筝，无论飞去多远，内心深处总会隐藏着一根纤细又坚韧的丝线。走得越远，这根线就牵得越紧，生生扯出一些痛意。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;​	生命中最美好的事都是免费的。&lt;/p&gt;

  &lt;p&gt;​	真正的幸福，&lt;/p&gt;

  &lt;p&gt;​	不是惊天动地的事，&lt;/p&gt;

  &lt;p&gt;​	而是懂得发现生命中的小美好，&lt;/p&gt;

  &lt;p&gt;​	过自己想要的生活。&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>mkDlufop</name></author><category term="杂记" /><summary type="html">​ 人生虽然充满痛苦，却并不悲观。正是因为有了这受之不尽的痛苦。人的精神才最大范围的得以解放。痛苦磨炼人的意志，痛苦解放人的心灵，痛苦激发人的生机，痛苦增强人的生命力。而人正是在痛苦以及征服痛苦的战斗中，才最高限度地享受了生命。 ​ 永远年轻，永远热泪盈眶。 ​ 成长是一个不断得到，但更是一个不断失去的过程。一个人是这样，一个家庭是这样，一个时代也是这样。在吴华超的记忆里，童年的杨桃树和火鸡已经成为了永远无法回归的过去，就仿佛奔驰而过的时光列车，呼啸而过，一去不返。在青春这片空旷的原野上，在故乡这片空旷的原野上，给我们留下的还有些什么？是一截闪亮的铁轨，还是无尽的奔跑？ ​ 吴华超告诉我们，是奔跑。因为不灭的梦想还在前方，新的家园也在前方。 ​ 旧时光就如同一只飘忽不定的蝴蝶，萦绕在记忆中，却始终难以捉住。我们对于旧时光的追忆，往往伴随着怀旧的阵痛和淡淡的乡愁。这份乡愁不仅仅是指对远离了的故土的思念，更包含了对离自己而去的那些往日情感的缅怀。那时自己永远也无法再回去的情感的故乡，精神的家园，因而，每每忆及，都免不了心生感慨。 ​ 刘蕴仪通过对自己与亲人之间的往事的追忆，向我们生动地展示了她心中的那只捉不住的蝴蝶，让人更加珍惜当下的美好——不要让每一只蝴蝶，都飞进回忆的花海，再也回不来了。 ​ 那一只捉不住的蝴蝶，也将永远飞舞在我心间。生命中一些见证成长的本质并不会被遗忘，相反，在时间的淘洗中，它们愈会迸发出熠熠的光彩，照亮我今后的岁月征程，成为离心口最近的那一缕不散的情思。 ​ 那一只捉不住的蝴蝶，那些消逝的人们的影像，在远离的同时亦用他们的背影诠释这最大的智慧。与其追悔过去，不如珍惜此时此刻，凭着良知与包容，尝试原谅与宽恕。 ​ 不然，我们只能在岁月的末尾，带着沉重的叹息，慢慢地转过身，步履蹒跚地离开。 ​ 怀旧的人，就像一只风筝，无论飞去多远，内心深处总会隐藏着一根纤细又坚韧的丝线。走得越远，这根线就牵得越紧，生生扯出一些痛意。 ​ 生命中最美好的事都是免费的。 ​ 真正的幸福， ​ 不是惊天动地的事， ​ 而是懂得发现生命中的小美好， ​ 过自己想要的生活。</summary></entry><entry><title type="html">3dmax开发卡</title><link href="http://localhost:4000/2021-04-23-3dmax-development-optimization/" rel="alternate" type="text/html" title="3dmax开发卡" /><published>2021-04-23T00:00:00+08:00</published><updated>2021-04-23T00:00:00+08:00</updated><id>http://localhost:4000/3dmax-development-optimization</id><content type="html" xml:base="http://localhost:4000/2021-04-23-3dmax-development-optimization/">&lt;h4 id=&quot;使用一些释放内存的maxscript函数&quot;&gt;使用一些释放内存的MAXScript函数&lt;/h4&gt;

&lt;p&gt;打开MAXScript 侦听器，输入以下函数：&lt;/p&gt;

&lt;p&gt;gc()	运行垃圾收集例程&lt;/p&gt;

&lt;p&gt;freescenebitmaps()	释放分配给位图的内存&lt;/p&gt;

&lt;p&gt;clearundobuffer()	清除撤销缓冲区（就是把撤销操作的缓存删除）&lt;/p&gt;</content><author><name>mkDlufop</name></author><category term="3dmax" /><summary type="html">使用一些释放内存的MAXScript函数 打开MAXScript 侦听器，输入以下函数： gc() 运行垃圾收集例程 freescenebitmaps() 释放分配给位图的内存 clearundobuffer() 清除撤销缓冲区（就是把撤销操作的缓存删除）</summary></entry><entry><title type="html">win10装机</title><link href="http://localhost:4000/2021-04-22-install-equipment/" rel="alternate" type="text/html" title="win10装机" /><published>2021-04-22T00:00:00+08:00</published><updated>2021-04-22T00:00:00+08:00</updated><id>http://localhost:4000/install-equipment</id><content type="html" xml:base="http://localhost:4000/2021-04-22-install-equipment/">&lt;h4 id=&quot;准备工作&quot;&gt;准备工作：&lt;/h4&gt;

&lt;p&gt;1，一块&amp;gt;4G的U盘&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1,注意备份U盘里的文件，因为制作U盘启动过程中会格式化&lt;/p&gt;

  &lt;p&gt;2，系统ISO文件&amp;gt;4G，而一般U盘默认的FAT32文件不支持4GB的文件传输，所以要把U盘格式化为NTFS或exFAT。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2，系统ISO文件&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;下载网址：https://msdn.itellyou.cn/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3，U盘启动制作软件&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;常用软件：MediaCreationTool、Rufus、WePE&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;制作u盘启动&quot;&gt;制作U盘启动&lt;/h4&gt;</content><author><name>mkDlufop</name></author><category term="装机" /><summary type="html">准备工作： 1，一块&amp;gt;4G的U盘 1,注意备份U盘里的文件，因为制作U盘启动过程中会格式化 2，系统ISO文件&amp;gt;4G，而一般U盘默认的FAT32文件不支持4GB的文件传输，所以要把U盘格式化为NTFS或exFAT。 2，系统ISO文件 下载网址：https://msdn.itellyou.cn/ 3，U盘启动制作软件 常用软件：MediaCreationTool、Rufus、WePE 制作U盘启动</summary></entry><entry><title type="html">unity开发注意事项</title><link href="http://localhost:4000/2021-04-13-3dmax-import-unity3d/" rel="alternate" type="text/html" title="unity开发注意事项" /><published>2021-04-13T00:00:00+08:00</published><updated>2021-04-13T00:00:00+08:00</updated><id>http://localhost:4000/3dmax-import-unity3d</id><content type="html" xml:base="http://localhost:4000/2021-04-13-3dmax-import-unity3d/">&lt;h1 id=&quot;unity项目打包到webgl平台的注意事项&quot;&gt;unity项目打包到webgl平台的注意事项&lt;/h1&gt;

&lt;h3 id=&quot;1项目地址问题&quot;&gt;1，项目地址问题&lt;/h3&gt;

&lt;p&gt;​	unity项目地址和打包的文件夹地址不能含有中文。&lt;/p&gt;

&lt;h3 id=&quot;2字体问题&quot;&gt;2，字体问题&lt;/h3&gt;

&lt;p&gt;​	webgl不支持Arial字体，需自行导入.ttf格式或.otf格式字体。&lt;/p&gt;

&lt;h3 id=&quot;3-压缩格式设置&quot;&gt;3， 压缩格式设置&lt;/h3&gt;

&lt;p&gt;​	将项目打包成webgl格式后在浏览器中打开卡住，同时浏览器console里报错Uncaught ReferenceError: unityFramework is not defined。
​	这时将压缩格式 改为 已禁用, 再次发布即可。&lt;/p&gt;

&lt;h1 id=&quot;unity和3dmax里的单位问题&quot;&gt;unity和3dmax里的单位问题&lt;/h1&gt;

&lt;p&gt;unity中：1个单位长度=1m&lt;/p&gt;

&lt;p&gt;3dmax中：系统单位*物理单位=显示单位&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考资料：&lt;/p&gt;

  &lt;p&gt;https://my.oschina.net/u/4309066/blog/3411315&lt;/p&gt;

  &lt;p&gt;https://blog.csdn.net/m0_37921148/article/details/79848675&lt;/p&gt;

  &lt;p&gt;http://blog.dou.li/unity3d-import-3dmax-model-scale.html&lt;/p&gt;

  &lt;p&gt;https://blog.csdn.net/aikb6223/article/details/102349997&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>mkDlufop</name></author><category term="unity" /><summary type="html">unity项目打包到webgl平台的注意事项 1，项目地址问题 ​ unity项目地址和打包的文件夹地址不能含有中文。 2，字体问题 ​ webgl不支持Arial字体，需自行导入.ttf格式或.otf格式字体。 3， 压缩格式设置 ​ 将项目打包成webgl格式后在浏览器中打开卡住，同时浏览器console里报错Uncaught ReferenceError: unityFramework is not defined。 ​ 这时将压缩格式 改为 已禁用, 再次发布即可。 unity和3dmax里的单位问题 unity中：1个单位长度=1m 3dmax中：系统单位*物理单位=显示单位 参考资料： https://my.oschina.net/u/4309066/blog/3411315 https://blog.csdn.net/m0_37921148/article/details/79848675 http://blog.dou.li/unity3d-import-3dmax-model-scale.html https://blog.csdn.net/aikb6223/article/details/102349997</summary></entry><entry><title type="html">3dmax常用快捷键</title><link href="http://localhost:4000/2021-03-26-3dmax-hotkey/" rel="alternate" type="text/html" title="3dmax常用快捷键" /><published>2021-03-26T00:00:00+08:00</published><updated>2021-03-26T00:00:00+08:00</updated><id>http://localhost:4000/3dmax-hotkey</id><content type="html" xml:base="http://localhost:4000/2021-03-26-3dmax-hotkey/">&lt;h4 id=&quot;视口导航控件&quot;&gt;视口导航控件&lt;/h4&gt;

&lt;p&gt;环绕（自由旋转、只适合透视图）	alt+鼠标中键&lt;/p&gt;

&lt;p&gt;所选视图/所选物体最大化显示	z&lt;/p&gt;

&lt;p&gt;在任何活动视口的正常大小和全屏大小之间切换	alt+w&lt;/p&gt;

&lt;p&gt;所有视图里所有物体最大化显示	shift+ctrl+z&lt;/p&gt;

&lt;p&gt;区域缩放	ctrl+w&lt;/p&gt;

&lt;p&gt;撤销视口操作	shift+z&lt;/p&gt;

&lt;h4 id=&quot;视口&quot;&gt;视口&lt;/h4&gt;

&lt;p&gt;顶视图	t&lt;/p&gt;

&lt;p&gt;前视图	f&lt;/p&gt;

&lt;p&gt;左视图	l&lt;/p&gt;

&lt;p&gt;透视图	p&lt;/p&gt;

&lt;p&gt;物体切换实体或线框	f3&lt;/p&gt;

&lt;p&gt;物体外围是否显示线框	f4&lt;/p&gt;

&lt;p&gt;使视口成为活动视口	windows+shift&lt;/p&gt;

&lt;h4 id=&quot;世界坐标与屏幕坐标&quot;&gt;世界坐标与屏幕坐标&lt;/h4&gt;

&lt;p&gt;世界坐标与屏幕坐标	f12&lt;/p&gt;

&lt;p&gt;加边	ctrl+shift+e&lt;/p&gt;</content><author><name>mkDlufop</name></author><category term="efficiency" /><summary type="html">视口导航控件 环绕（自由旋转、只适合透视图） alt+鼠标中键 所选视图/所选物体最大化显示 z 在任何活动视口的正常大小和全屏大小之间切换 alt+w 所有视图里所有物体最大化显示 shift+ctrl+z 区域缩放 ctrl+w 撤销视口操作 shift+z 视口 顶视图 t 前视图 f 左视图 l 透视图 p 物体切换实体或线框 f3 物体外围是否显示线框 f4 使视口成为活动视口 windows+shift 世界坐标与屏幕坐标 世界坐标与屏幕坐标 f12 加边 ctrl+shift+e</summary></entry><entry><title type="html">windows常用快捷键</title><link href="http://localhost:4000/2021-01-24-windows-hotkey/" rel="alternate" type="text/html" title="windows常用快捷键" /><published>2021-01-24T00:00:00+08:00</published><updated>2021-01-24T00:00:00+08:00</updated><id>http://localhost:4000/windows-hotkey</id><content type="html" xml:base="http://localhost:4000/2021-01-24-windows-hotkey/">&lt;p&gt;Ctrl+S 保存
Ctrl+W 关闭程序
Ctrl+N 新建
Ctrl+O 打开
Ctrl+Z 撤销
Ctrl+F 查找
Ctrl+X 剪切
Ctrl+C 复制
Ctrl+V 粘贴
Ctrl+A 全选
Ctrl+[ 缩小文字
Ctrl+] 放大文字
Ctrl+B 粗体
Ctrl+I 斜体
Ctrl+U 下划线
Ctrl+Shift 输入法切换
Ctrl+空格 中英文切换
Ctrl+回车 QQ号中发送信息
Ctrl+Home 光标快速移到文件头
Ctrl+End 光标快速移到文件尾
Ctrl+Esc 显示开始菜单
Ctrl+Shift+&amp;lt; 快速缩小文字
Ctrl+Shift+&amp;gt; 快速放大文字
Ctrl+F5 在IE中强行刷新
Ctrl+拖动文件 复制文件
Ctrl+Backspace 启动关闭输入法
拖动文件时按住Ctrl+Shift 创建快捷方式
Alt+空格+C 关闭窗口
Alt+空格+N 最小化当前窗口
Alt+空格+R 恢复最小化窗口
Alt+空格+X 最大化当前窗口
Alt+空格+M 移动窗口
Alt+空格+S 改变窗口 大小
Alt+Tab 两个程序交换
Alt+255 QQ号中输入无名人
Alt+F 打开文件菜单
Alt+V 打开视图菜单
Alt+E 打开编辑菜单
Alt+I 打开插入菜单
Alt+O 打开格式菜单
Alt+T 打开工具菜单
Alt+A 打开表格菜单
Alt+H 打开帮助菜单
Alt+回车 查看文件属性
Alt+双击文件 查看文件属性
Alt+X 关闭C语言
Shift快捷键
Shift+空格 半全角切换
Shift + Delete 永久删除所选项，而不将它放到“回收站”中。 拖动某一项时按 CTRL 复制所选项。
拖动某一项时按 CTRL + SHIFT 创建所选项目的快捷键。 WORD全套快捷键小技巧
CTRL+O 打开
CTRL+P 打印
CTRL+A 全选
CTRL+[/] 对文字进行大小设置（在选中目标情况下） CTRL+D 字体设置（在选中目标情况下）
CTRL+G/H 查找/替换;
CTRL+N 全文删除;
CTRL+M 左边距（在选中目标情况下）;
CTRL+U 绘制下划线（在选中目标情况下）;
CTRL+B 加粗文字（在选中目标情况下）;
CTRL+I 倾斜文字（在选中目标情况下）;
CTRL+Q 两边对齐（无首行缩进），（在选中目标情况下）
或将光标放置目标文 字的段尾，亦可操作 CTRL+J 两端对齐（操作同上）
CTRL+E 居中（操作同上）
CTRL+R 右对齐（操作同上）
CTRL+K 插入超链接
CTRL+T/Y 可进行首行缩进（将光标移到需做此操作的段尾，或将此段选中进行操作
Ctrl+A（或Ctrl+小键盘上数字5）：选中全文。
Ctrl+B：给选中的文字加粗（再按一次，取消加粗）。 Ctrl+C：将选中的文字复制到剪贴板中。
Ctrl+D：打开“字体”对话框，快速完成字体的各种设置。 Ctrl+E：使光标所在行的文本居中。
Ctrl+F：打开“查找与替换”对话框，并定位在“查找”标签上。 Ctrl+G：打开“查找与替换”对话框，并定位在“定位”标签上。 Ctrl+H：打开“查找与替换”对话框，并定位在“替换”标签上。 Ctrl+I：使选中的文字倾斜（再按一次，取消倾斜）。 Ctrl+K：打开“插入超链接”对话框。
Ctrl+Shift+L：给光标所在行的文本加上“项目符号”。 Ctrl+M：同时增加首行和悬挂缩进。
Ctrl+Shift+M：同时减少首行和悬挂缩进。
Ctrl+N：新建一个空文档。
Ctrl+O（或Ctrl+F12）：打开“打开”对话框。&lt;/p&gt;

&lt;p&gt;Ctrl+P（或Ctrl+Shift+F12）：打开“打印”对话框。 Ctrl+R：使光标所在行的文本右对齐。
Ctrl+S：为新文档打开“另保存为”对话框，或对当前文档进行保存。
Ctrl+T：增加首行缩进。
Ctrl+Shift+T：减少首行缩进。
Ctrl+U：给选中的文字加上下划线（再按一次，去年下划线）。 Ctrl+V：将剪贴板中的文本或图片粘贴到光标处。若剪贴板中有多个内容，则将 最后一条内容粘贴到光标处。
Ctrl+X：将选中的文字剪切到剪贴板中。
Ctrl+Z：撤销刚才进行的操作（可以多次使用）。 Ctrl+0：将选中的文本每段前增加12磅的间距。
Ctrl+1：若选中的文本行距不是“单倍行距”，则将其快速设置为“单倍行距”。
Ctrl+2：将选中的文本行距设置为“两倍行距”。
Ctrl+5：将选中的文本行距设置为“1.5倍行距”。 Ctrl+F2：快速执行“打印预览”功能。
Ctrl+F4：关闭当前文档。
Ctrl+F5：使窗口还原到最大化之前的状态。
Ctrl+Shift+F5：打开“书签”对话框。
Ctrl+Shift+F8：激活列选择功能，即通常所说的选择竖块文&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+L&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;电脑就直接锁屏&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+E&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我的电脑&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+D&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;同时按住windows和D键，可以让你打开的电脑程序迅速隐藏，至于为什么要快速退回桌面，原因你懂得。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+Tab&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一个非常炫酷的功能，同时按住windows键以及Tab键，即可以看到一个3D的窗口切换效果。如果您电脑不能实现的话，就需要先进行设置一下。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+R&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我们的电脑中，windows有自带屏幕拍照捕获功能，按住windows+R键，然后再运行窗口中输入psr.exe再确定即可，相当于qq的全屏截图，不过这个根据具体的需要了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+X&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;有时候我们需要查看或调整显示器亮度、音量大小、无线网设置，以及进行电脑与投影接好了线之后的设置，这时我们就可以同时按住windows+X键，便可以一次性显示并调整多种参数。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows+R&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其实除了我们电脑前的实物键盘，在我们的电脑桌面上还有一个虚拟的炫酷键盘，只需要按住windows+R键，然后在出现的运行窗口中输入osk再确定，即可显示出来，另外，当我们按下一个键时，虚拟键盘也会呈按下状态。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;windows 和 +&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我们的电脑中有放大功能，当觉得字或图片太小看不清时，可以按住windows和+键，便会出现放大镜图标，需要退出时，再点击一下放大镜图标退出即可。 按windows 和 -恢复&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ctrl+Tab、Ctrl+W&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当我们电脑打开了多个程序时，比如QQ、微信以及各种网页，各种不同的页面可能出现在一个窗口中，我们可以按住Ctrl+Tab键在不同页面之间切换，另外当需要退出时，可以直接用键盘按住Ctrl+W键即可快速退出。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;word办公小技巧&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ctrl+C/V就不介绍了。&lt;/p&gt;

&lt;p&gt;Ctrl+O 打开 Ctrl+B 粗体 Ctrl+i 斜体 Ctrl+Z 撤销&lt;/p&gt;

&lt;p&gt;Ctrl+S 保存 Ctrl+X 剪切 Ctrl+F 查找 Ctrl+U下划线&lt;/p&gt;</content><author><name>mkDlufop</name></author><category term="efficiency" /><summary type="html">Ctrl+S 保存 Ctrl+W 关闭程序 Ctrl+N 新建 Ctrl+O 打开 Ctrl+Z 撤销 Ctrl+F 查找 Ctrl+X 剪切 Ctrl+C 复制 Ctrl+V 粘贴 Ctrl+A 全选 Ctrl+[ 缩小文字 Ctrl+] 放大文字 Ctrl+B 粗体 Ctrl+I 斜体 Ctrl+U 下划线 Ctrl+Shift 输入法切换 Ctrl+空格 中英文切换 Ctrl+回车 QQ号中发送信息 Ctrl+Home 光标快速移到文件头 Ctrl+End 光标快速移到文件尾 Ctrl+Esc 显示开始菜单 Ctrl+Shift+&amp;lt; 快速缩小文字 Ctrl+Shift+&amp;gt; 快速放大文字 Ctrl+F5 在IE中强行刷新 Ctrl+拖动文件 复制文件 Ctrl+Backspace 启动关闭输入法 拖动文件时按住Ctrl+Shift 创建快捷方式 Alt+空格+C 关闭窗口 Alt+空格+N 最小化当前窗口 Alt+空格+R 恢复最小化窗口 Alt+空格+X 最大化当前窗口 Alt+空格+M 移动窗口 Alt+空格+S 改变窗口 大小 Alt+Tab 两个程序交换 Alt+255 QQ号中输入无名人 Alt+F 打开文件菜单 Alt+V 打开视图菜单 Alt+E 打开编辑菜单 Alt+I 打开插入菜单 Alt+O 打开格式菜单 Alt+T 打开工具菜单 Alt+A 打开表格菜单 Alt+H 打开帮助菜单 Alt+回车 查看文件属性 Alt+双击文件 查看文件属性 Alt+X 关闭C语言 Shift快捷键 Shift+空格 半全角切换 Shift + Delete 永久删除所选项，而不将它放到“回收站”中。 拖动某一项时按 CTRL 复制所选项。 拖动某一项时按 CTRL + SHIFT 创建所选项目的快捷键。 WORD全套快捷键小技巧 CTRL+O 打开 CTRL+P 打印 CTRL+A 全选 CTRL+[/] 对文字进行大小设置（在选中目标情况下） CTRL+D 字体设置（在选中目标情况下） CTRL+G/H 查找/替换; CTRL+N 全文删除; CTRL+M 左边距（在选中目标情况下）; CTRL+U 绘制下划线（在选中目标情况下）; CTRL+B 加粗文字（在选中目标情况下）; CTRL+I 倾斜文字（在选中目标情况下）; CTRL+Q 两边对齐（无首行缩进），（在选中目标情况下） 或将光标放置目标文 字的段尾，亦可操作 CTRL+J 两端对齐（操作同上） CTRL+E 居中（操作同上） CTRL+R 右对齐（操作同上） CTRL+K 插入超链接 CTRL+T/Y 可进行首行缩进（将光标移到需做此操作的段尾，或将此段选中进行操作 Ctrl+A（或Ctrl+小键盘上数字5）：选中全文。 Ctrl+B：给选中的文字加粗（再按一次，取消加粗）。 Ctrl+C：将选中的文字复制到剪贴板中。 Ctrl+D：打开“字体”对话框，快速完成字体的各种设置。 Ctrl+E：使光标所在行的文本居中。 Ctrl+F：打开“查找与替换”对话框，并定位在“查找”标签上。 Ctrl+G：打开“查找与替换”对话框，并定位在“定位”标签上。 Ctrl+H：打开“查找与替换”对话框，并定位在“替换”标签上。 Ctrl+I：使选中的文字倾斜（再按一次，取消倾斜）。 Ctrl+K：打开“插入超链接”对话框。 Ctrl+Shift+L：给光标所在行的文本加上“项目符号”。 Ctrl+M：同时增加首行和悬挂缩进。 Ctrl+Shift+M：同时减少首行和悬挂缩进。 Ctrl+N：新建一个空文档。 Ctrl+O（或Ctrl+F12）：打开“打开”对话框。 Ctrl+P（或Ctrl+Shift+F12）：打开“打印”对话框。 Ctrl+R：使光标所在行的文本右对齐。 Ctrl+S：为新文档打开“另保存为”对话框，或对当前文档进行保存。 Ctrl+T：增加首行缩进。 Ctrl+Shift+T：减少首行缩进。 Ctrl+U：给选中的文字加上下划线（再按一次，去年下划线）。 Ctrl+V：将剪贴板中的文本或图片粘贴到光标处。若剪贴板中有多个内容，则将 最后一条内容粘贴到光标处。 Ctrl+X：将选中的文字剪切到剪贴板中。 Ctrl+Z：撤销刚才进行的操作（可以多次使用）。 Ctrl+0：将选中的文本每段前增加12磅的间距。 Ctrl+1：若选中的文本行距不是“单倍行距”，则将其快速设置为“单倍行距”。 Ctrl+2：将选中的文本行距设置为“两倍行距”。 Ctrl+5：将选中的文本行距设置为“1.5倍行距”。 Ctrl+F2：快速执行“打印预览”功能。 Ctrl+F4：关闭当前文档。 Ctrl+F5：使窗口还原到最大化之前的状态。 Ctrl+Shift+F5：打开“书签”对话框。 Ctrl+Shift+F8：激活列选择功能，即通常所说的选择竖块文 windows+L 电脑就直接锁屏 windows+E 我的电脑 windows+D 同时按住windows和D键，可以让你打开的电脑程序迅速隐藏，至于为什么要快速退回桌面，原因你懂得。 windows+Tab 一个非常炫酷的功能，同时按住windows键以及Tab键，即可以看到一个3D的窗口切换效果。如果您电脑不能实现的话，就需要先进行设置一下。 windows+R 在我们的电脑中，windows有自带屏幕拍照捕获功能，按住windows+R键，然后再运行窗口中输入psr.exe再确定即可，相当于qq的全屏截图，不过这个根据具体的需要了。 windows+X 有时候我们需要查看或调整显示器亮度、音量大小、无线网设置，以及进行电脑与投影接好了线之后的设置，这时我们就可以同时按住windows+X键，便可以一次性显示并调整多种参数。 windows+R 其实除了我们电脑前的实物键盘，在我们的电脑桌面上还有一个虚拟的炫酷键盘，只需要按住windows+R键，然后在出现的运行窗口中输入osk再确定，即可显示出来，另外，当我们按下一个键时，虚拟键盘也会呈按下状态。 windows 和 + 在我们的电脑中有放大功能，当觉得字或图片太小看不清时，可以按住windows和+键，便会出现放大镜图标，需要退出时，再点击一下放大镜图标退出即可。 按windows 和 -恢复 Ctrl+Tab、Ctrl+W 当我们电脑打开了多个程序时，比如QQ、微信以及各种网页，各种不同的页面可能出现在一个窗口中，我们可以按住Ctrl+Tab键在不同页面之间切换，另外当需要退出时，可以直接用键盘按住Ctrl+W键即可快速退出。 word办公小技巧 Ctrl+C/V就不介绍了。 Ctrl+O 打开 Ctrl+B 粗体 Ctrl+i 斜体 Ctrl+Z 撤销 Ctrl+S 保存 Ctrl+X 剪切 Ctrl+F 查找 Ctrl+U下划线</summary></entry><entry><title type="html">MIT牛人解说数学体系</title><link href="http://localhost:4000/2021-01-18-summarize-the-mathematical-system/" rel="alternate" type="text/html" title="MIT牛人解说数学体系" /><published>2021-01-18T00:00:00+08:00</published><updated>2021-01-18T00:00:00+08:00</updated><id>http://localhost:4000/summarize-the-mathematical-system</id><content type="html" xml:base="http://localhost:4000/2021-01-18-summarize-the-mathematical-system/">&lt;blockquote&gt;
  &lt;p&gt;林达华是MIT计算机科学博士，读研时以贝叶斯非参建模斩获顶会NIPS2010年最佳学生论文奖、ICCV2009和2011杰出评审员奖，现任香港中文大学教授。本文介绍其科学学习经验，约写于2011年10月，转发科学网等被大量传播至今。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;[TOC]&lt;/p&gt;

&lt;h3 id=&quot;1-为什么要深入数学的世界&quot;&gt;1 为什么要深入数学的世界&lt;/h3&gt;

&lt;p&gt;作为计算机的学生，我没有任何企图要成为一个数学家。我学习数学的目的，是要 想爬上巨人的肩膀，希望站在更高的高度，能把我自己研究的东西看得更深广一些。说起来，我在刚来这个学校的时候，并没有预料到我将会有一个深入数学的旅 程。我的导师最初希望我去做的题目，是对appearance和motion建立一个unified的model。这个题目在当今Computer Vision中百花齐放的世界中并没有任何特别的地方。事实上，使用各种Graphical Model把各种东西联合在一起framework，在近年的论文中并不少见。&lt;/p&gt;

&lt;p&gt;我不否认现在广泛流行的Graphical Model是对复杂现象建模的有力工具，但是，我认为它不是panacea，并不能取代对于所研究的问题的深入的钻研。如果统计学习包治百病，那么很多 “下游”的学科也就没有存在的必要了。事实上，开始的时候，我也是和Vision中很多人一样，想着去做一个Graphical Model——我的导师指出，这样的做法只是重复一些标准的流程，并没有很大的价值。经过很长时间的反复，另外一个路径慢慢被确立下来——我们相信，一个 图像是通过大量“原子”的某种空间分布构成的，原子群的运动形成了动态的可视过程。微观意义下的单个原子运动，和宏观意义下的整体分布的变换存在着深刻的 联系——这需要我们去发掘。&lt;/p&gt;

&lt;p&gt;在深入探索这个题目的过程中，遇到了很多很多的问题，如何描述一个一般的运动过程，如何建立一个稳定并且广泛适用的原子表达，如何刻画微观运动和宏观分布变换的联系，还有很多。在这个过程中，我发现了两个事情：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我原有的数学基础已经远远不能适应我对这些问题的深入研究。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在数学中，有很多思想和工具，是非常适合解决这些问题的，只是没有被很多的应用科学的研究者重视。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;于是，我决心开始深入数学这个浩瀚大海，希望在我再次走出来的时候，我已经有了更强大的武器去面对这些问题的挑战。&lt;/p&gt;

&lt;p&gt;我的游历并没有结束，我的视野相比于这个博大精深的世界的依旧显得非常狭窄。在这里，我只是说说，在我的眼中，数学如何一步步从初级向高级发展，更高级别的数学对于具体应用究竟有何好处。&lt;/p&gt;

&lt;h3 id=&quot;2-集合论现代数学的共同基础&quot;&gt;2 集合论：现代数学的共同基础&lt;/h3&gt;

&lt;p&gt;现代数学有数不清的分支，但是，它们都有一个共同的基础——集合论——因为 它，数学这个庞大的家族有个共同的语言。集合论中有一些最基本的概念：集合(set)，关系(relation)，函数(function)，等价 (equivalence)，是在其它数学分支的语言中几乎必然存在的。对于这些简单概念的理解，是进一步学些别的数学的基础。我相信，理工科大学生对于 这些都不会陌生。&lt;/p&gt;

&lt;p&gt;不过，有一个很重要的东西就不见得那么家喻户晓了——那就是“选择公理” (Axiom of Choice)。这个公理的意思是“任意的一群非空集合，一定可以从每个集合中各拿出一个元素。”——似乎是显然得不能再显然的命题。不过，这个貌似平常 的公理却能演绎出一些比较奇怪的结论，比如巴拿赫-塔斯基分球定理——“一个球，能分成五个部分，对它们进行一系列刚性变换（平移旋转）后，能组合成两个&lt;strong&gt;一样大小&lt;/strong&gt;的球”。正因为这些完全有悖常识的结论，导致数学界曾经在相当长时间里对于是否接受它有着激烈争论。现在，主流数学家对于它应该是基本接受的，因为很多数学分支的重要定理都依赖于它。在我们后面要回说到的学科里面，下面的定理依赖于选择公理：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;拓扑学：Baire Category Theorem&lt;/li&gt;
  &lt;li&gt;实分析（测度理论）：Lebesgue 不可测集的存在性&lt;/li&gt;
  &lt;li&gt;泛函分析四个主要定理：Hahn-Banach Extension Theorem, Banach-Steinhaus Theorem (Uniform boundedness principle), Open Mapping Theorem, Closed Graph Theorem&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;在集合论的基础上，现代数学有两大家族：分析(Analysis)和代数(Algebra)。&lt;/strong&gt;至于其它的，比如几何和概率论，在古典数学时代，它们是和代数并列的，但是它们的现代版本则基本是建立在分析或者代数的基础上，因此从现代意义说，它们和分析与代数并不是平行的关系。&lt;/p&gt;

&lt;h3 id=&quot;3-分析在极限基础上建立的宏伟大厦&quot;&gt;3 分析：在极限基础上建立的宏伟大厦&lt;/h3&gt;

&lt;h4 id=&quot;31-微积分分析的古典时代从牛顿到柯西&quot;&gt;3.1 微积分：分析的古典时代–从牛顿到柯西&lt;/h4&gt;

&lt;p&gt;先说说分析(Analysis)吧，它是从微积分(Caculus)发展起来 的——这也是有些微积分教材名字叫“数学分析”的原因。不过，分析的范畴远不只是这些，我们在大学一年级学习的微积分只能算是对古典分析的入门。分析研究 的对象很多，包括导数(derivatives)，积分(integral)，微分方程(differential equation)，还有级数(infinite series)——这些基本的概念，在初等的微积分里面都有介绍。如果说有一个思想贯穿其中，那就是极限——这是整个分析（不仅仅是微积分）的灵魂。&lt;/p&gt;

&lt;p&gt;一个很多人都听说过的故事，就是牛顿(Newton)和莱布尼茨 (Leibniz)关于微积分发明权的争论。事实上，在他们的时代，很多微积分的工具开始运用在科学和工程之中，但是，微积分的基础并没有真正建立。那个 长时间一直解释不清楚的“无穷小量”的幽灵，困扰了数学界一百多年的时间——这就是“第二次数学危机”。直到柯西用数列极限的观点重新建立了微积分的基本 概念，这门学科才开始有了一个比较坚实的基础。直到今天，整个分析的大厦还是建立在极限的基石之上。&lt;/p&gt;

&lt;p&gt;柯西(Cauchy)为分析的发展提供了一种严密的语言，但是他并没有解决微 积分的全部问题。在19世纪的时候，分析的世界仍然有着一些挥之不去的乌云。而其中最重要的一个没有解决的是“函数是否可积的问题”。我们在现在的微积分 课本中学到的那种通过“无限分割区间，取矩阵面积和的极限”的积分，是大约在1850年由黎曼(Riemann)提出的，叫做黎曼积分。但是，什么函数存 在黎曼积分呢（黎曼可积）？数学家们很早就证明了，定义在闭区间内的连续函数是黎曼可积的。可是，这样的结果并不令人满意，工程师们需要对分段连续函数的 函数积分。&lt;/p&gt;

&lt;h4 id=&quot;32-实分析在实数理论和测度理论上建立起现代分析&quot;&gt;3.2 实分析：在实数理论和测度理论上建立起现代分析&lt;/h4&gt;

&lt;p&gt;在19世纪中后期，不连续函数的可积性问题一直是分析的重要课题。对于定义在 闭区间上的黎曼积分的研究发现，可积性的关键在于“不连续的点足够少”。只有有限处不连续的函数是可积的，可是很多有数学家们构造出很多在无限处不连续的 可积函数。显然，在衡量点集大小的时候，有限和无限并不是一种合适的标准。在探讨“点集大小”这个问题的过程中，数学家发现实数轴——这个他们曾经以为已 经充分理解的东西——有着许多他们没有想到的特性。在极限思想的支持下，实数理论在这个时候被建立起来，它的标志是对实数完备性进行刻画的几条等价的定理 （确界定理，区间套定理，柯西收敛定理，Bolzano-Weierstrass Theorem和Heine-Borel Theorem等等）——这些定理明确表达出实数和有理数的根本区别：完备性（很不严格的说，就是对极限运算封闭）。随着对实数认识的深入，如何测量“点 集大小”的问题也取得了突破，勒贝格创造性地把关于集合的代数，和Outer content（就是“外测度”的一个雏形）的概念结合起来，建立了测度理论(Measure Theory)，并且进一步建立了以测度为基础的积分——勒贝格(Lebesgue Integral)。在这个新的积分概念的支持下，可积性问题变得一目了然。&lt;/p&gt;

&lt;p&gt;上面说到的实数理论，测度理论和勒贝格积分，构成了我们现在称为实分析 (Real Analysis)的数学分支，有些书也叫实变函数论。对于应用科学来说，实分析似乎没有古典微积分那么“实用”——很难直接基于它得到什么算法。而且， 它要解决的某些“难题”——比如处处不连续的函数，或者处处连续而处处不可微的函数——在工程师的眼中，并不现实。但是，我认为，它并不是一种纯数学概念 游戏，它的现实意义在于为许多现代的应用数学分支提供坚实的基础。下面，我仅仅列举几条它的用处：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;黎曼可积的函数空间不是完备的，但是勒贝格可积的函数空间是完备的。简单的 说，一个黎曼可积的函数列收敛到的那个函数不一定是黎曼可积的，但是勒贝格可积的函数列必定收敛到一个勒贝格可积的函数。在泛函分析，还有逼近理论中，经 常需要讨论“函数的极限”，或者“函数的级数”，如果用黎曼积分的概念，这种讨论几乎不可想像。我们有时看一些paper中提到Lp函数空间，就是基于勒 贝格积分。&lt;/li&gt;
  &lt;li&gt;勒贝格积分是傅立叶变换（这东西在工程中到处都是）的基础。很多关于信号处理的初等教材，可能绕过了勒贝格积分，直接讲点面对实用的东西而不谈它的数学基础，但是，对于深层次的研究问题——特别是希望在理论中能做一些工作——这并不是总能绕过去。&lt;/li&gt;
  &lt;li&gt;在下面，我们还会看到，测度理论是现代概率论的基础。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;33-拓扑学-分析从实数轴推广到一般空间现代分析的抽象基础&quot;&gt;3.3 拓扑学： 分析从实数轴推广到一般空间–现代分析的抽象基础&lt;/h4&gt;

&lt;p&gt;随着实数理论的建立，大家开始把极限和连续推广到更一般的地方的分析。事实 上，很多基于实数的概念和定理并不是实数特有的。很多特性可以抽象出来，推广到更一般的空间里面。对于实数轴的推广，促成了点集拓扑学(Point- set Topology)的建立。很多原来只存在于实数中的概念，被提取出来，进行一般性的讨论。在拓扑学里面，有4个C构成了它的核心：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Closed set（闭集合）。在现代的拓扑学的公理化体系中，开集和闭集是最基本的概念。一切从此引申。这两个概念是开区间和闭区间的推广，它们的根本地位，并不是 一开始就被认识到的。经过相当长的时间，人们才认识到：开集的概念是连续性的基础，而闭集对极限运算封闭——而极限正是分析的根基。&lt;/li&gt;
  &lt;li&gt;Continuous function （连续函数）。连续函数在微积分里面有个用epsilon-delta语言给出的定义，在拓扑学中它的定义是“开集的原像是开集的函数”。第二个定义和第 一个是等价的，只是用更抽象的语言进行了改写。我个人认为，它的第三个（等价）定义才从根本上揭示连续函数的本质——“连续函数是保持极限运算的函数” ——比如y是数列x1, x2, x3, … 的极限， 那么如果 f 是连续函数，那么 f(y) 就是 f(x1), f(x2), f(x3), …的极限。连续函数的重要性，可以从别的分支学科中进行类比。比如群论中，基础的运算是“乘法”，对于群，最重要的映射叫“同态映射”——保持“乘法”的 映射。在分析中，基础运算是“极限”，因此连续函数在分析中的地位，和同态映射在代数中的地位是相当的。&lt;/li&gt;
  &lt;li&gt;Connected set （连通集合）。比它略为窄一点的概念叫(Path connected)，就是集合中任意两点都存在连续路径相连——可能是一般人理解的概念。一般意义下的连通概念稍微抽象一些。在我看来，连通性有两个重 要的用场：一个是用于证明一般的中值定理(Intermediate Value Theorem)，还有就是代数拓扑，拓扑群论和李群论中讨论根本群(Fundamental Group)的阶。&lt;/li&gt;
  &lt;li&gt;Compact set（紧集）。Compactness似乎在初等微积分里面没有专门出现，不过有几条实数上的定理和它其实是有关系的。比如，“有界数列必然存在收敛子 列”——用compactness的语言来说就是——“实数空间中有界闭集是紧的”。它在拓扑学中的一般定义是一个听上去比较抽象的东西——“紧集的任意 开覆盖存在有限子覆盖”。这个定义在讨论拓扑学的定理时很方便，它在很多时候能帮助实现从无限到有限的转换。对于分析来说，用得更多的是它的另一种形式 ——“紧集中的数列必存在收敛子列”——它体现了分析中最重要的“极限”。Compactness在现代分析中运用极广，无法尽述。微积分中的两个重要定 理：极值定理(Extreme Value Theory)，和一致收敛定理(Uniform Convergence Theorem)就可以借助它推广到一般的形式。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;从某种意义上说，点集拓扑学可以看成是关于“极限”的一般理论，它抽象于实数理论，它的概念成为几乎所有现代分析学科的通用语言，也是整个现代分析的根基所在。&lt;/p&gt;

&lt;h4 id=&quot;34-微分几何流形上的分析在拓扑空间上引入微分结构&quot;&gt;3.4 微分几何：流形上的分析–在拓扑空间上引入微分结构&lt;/h4&gt;

&lt;p&gt;拓扑学把极限的概念推广到一般的拓扑空间，但这不是故事的结束，而仅仅是开 始。在微积分里面，极限之后我们有微分，求导，积分。这些东西也可以推广到拓扑空间，在拓扑学的基础上建立起来——这就是微分几何。从教学上说，微分几何 的教材，有两种不同的类型，一种是建立在古典微机分的基础上的“古典微分几何”，主要是关于二维和三维空间中的一些几何量的计算，比如曲率。还有一种是建 立在现代拓扑学的基础上，这里姑且称为“现代微分几何”——它的核心概念就是“流形”(manifold)——就是在拓扑空间的基础上加了一套可以进行微 分运算的结构。现代微分几何是一门非常丰富的学科。比如一般流形上的微分的定义就比传统的微分丰富，我自己就见过三种从不同角度给出的等价定义——这一方 面让事情变得复杂一些，但是另外一个方面它给了同一个概念的不同理解，往往在解决问题时会引出不同的思路。除了推广微积分的概念以外，还引入了很多新概 念：tangent space, cotangent space, push forward, pull back, fibre bundle, flow, immersion, submersion 等等。&lt;/p&gt;

&lt;p&gt;近些年，流形在machine learning似乎相当时髦。但是，坦率地说，要弄懂一些基本的流形算法， 甚至“创造”一些流形算法，并不需要多少微分几何的基础。对我的研究来说，微分几何最重要的应用就是建立在它之上的另外一个分支：李群和李代数——这是数 学中两大家族分析和代数的一个漂亮的联姻。分析和代数的另外一处重要的结合则是泛函分析，以及在其基础上的调和分析。&lt;/p&gt;

&lt;h3 id=&quot;4-代数一个抽象的世界&quot;&gt;4 代数：一个抽象的世界&lt;/h3&gt;

&lt;h4 id=&quot;41-关于抽象的世界&quot;&gt;4.1 关于抽象的世界&lt;/h4&gt;

&lt;p&gt;回过头来，再说说另一个大家族——代数。&lt;/p&gt;

&lt;p&gt;如果说古典微积分是分析的入门，那么现代代数的入门点则是两个部分：线性代数(linear algebra)和基础的抽象代数(abstract algebra)——据说国内一些教材称之为近世代数。&lt;/p&gt;

&lt;p&gt;代数——名称上研究的似乎是数，在我看来，主要研究的是运算规则。一门代数， 其实都是从某种具体的运算体系中抽象出一些基本规则，建立一个公理体系，然后在这基础上进行研究。一个集合再加上一套运算规则，就构成一个代数结构。在主 要的代数结构中，最简单的是群(Group)——它只有一种符合结合率的可逆运算，通常叫“乘法”。如果，这种运算也符合交换率，那么就叫阿贝尔群 (Abelian Group)。如果有两种运算，一种叫加法，满足交换率和结合率，一种叫乘法，满足结合率，它们之间满足分配率，这种丰富一点的结构叫做环(Ring)， 如果环上的乘法满足交换率，就叫可交换环(Commutative Ring)。如果，一个环的加法和乘法具有了所有的良好性质，那么就成为一个域(Field)。基于域，我们可以建立一种新的结构，能进行加法和数乘，就 构成了线性代数(Linear algebra)。&lt;/p&gt;

&lt;p&gt;代数的好处在于，它只关心运算规则的演绎，而不管参与运算的对象。只要定义恰 当，完全可以让一只猫乘一只狗得到一头猪:-)。基于抽象运算规则得到的所有定理完全可以运用于上面说的猫狗乘法。当然，在实际运用中，我们还是希望用它 干点有意义的事情。学过抽象代数的都知道，基于几条最简单的规则，比如结合律，就能导出非常多的重要结论——这些结论可以应用到一切满足这些简单规则的地 方——这是代数的威力所在，我们不再需要为每一个具体领域重新建立这么多的定理。&lt;/p&gt;

&lt;p&gt;抽象代数有在一些基础定理的基础上，进一步的研究往往分为两个流派：研究有限 的离散代数结构（比如有限群和有限域），这部分内容通常用于数论，编码，和整数方程这些地方；另外一个流派是研究连续的代数结构，通常和拓扑与分析联系在 一起（比如拓扑群，李群）。我在学习中的focus主要是后者。&lt;/p&gt;

&lt;h4 id=&quot;42-线性代数线性的基础地位&quot;&gt;4.2 线性代数：“线性”的基础地位&lt;/h4&gt;

&lt;p&gt;对于做Learning, vision, optimization或者statistics的人来说，接触最多的莫过于线性代数——这也是我们在大学低年级就开始学习的。线性代数，包括建立在它 基础上的各种学科，最核心的两个概念是向量空间和线性变换。线性变换在线性代数中的地位，和连续函数在分析中的地位，或者同态映射在群论中的地位是一样的 ——它是保持基础运算（加法和数乘）的映射。&lt;/p&gt;

&lt;p&gt;在learning中有这样的一种倾向——鄙视线性算法，标榜非线性。也许在 很多场合下面，我们需要非线性来描述复杂的现实世界，但是无论什么时候，线性都是具有根本地位的。没有线性的基础，就不可能存在所谓的非线性推广。我们常 用的非线性化的方法包括流形和kernelization，这两者都需要在某个阶段回归线性。流形需要在每个局部建立和线性空间的映射，通过把许多局部线 性空间连接起来形成非线性；而kernerlization则是通过置换内积结构把原线性空间“非线性”地映射到另外一个线性空间，再进行线性空间中所能 进行的操作。而在分析领域，线性的运算更是无处不在，微分，积分，傅立叶变换，拉普拉斯变换，还有统计中的均值，通通都是线性的。&lt;/p&gt;

&lt;h4 id=&quot;43-泛函分析从有限维向无限维迈进&quot;&gt;4.3 泛函分析：从有限维向无限维迈进&lt;/h4&gt;

&lt;p&gt;在大学中学习的线性代数，它的简单主要因为它是在有限维空间进行的，因为有 限，我们无须借助于太多的分析手段。但是，有限维空间并不能有效地表达我们的世界——最重要的，函数构成了线性空间，可是它是无限维的。对函数进行的最重 要的运算都在无限维空间进行，比如傅立叶变换和小波分析。这表明了，为了研究函数（或者说连续信号），我们需要打破有限维空间的束缚，走入无限维的函数空 间——这里面的第一步，就是泛函分析。&lt;/p&gt;

&lt;p&gt;泛函分析(Functional Analysis)是研究的是一般的线性空间，包括有限维和无限维，但是很多东西在有限维下显得很trivial，真正的困难往往在无限维的时候出现。在 泛函分析中，空间中的元素还是叫向量，但是线性变换通常会叫作“算子”(operator)。除了加法和数乘，这里进一步加入了一些运算，比如加入范数去 表达“向量的长度”或者“元素的距离”，这样的空间叫做“赋范线性空间”(normed space)，再进一步的，可以加入内积运算，这样的空间叫“内积空间”(Inner product space)。&lt;/p&gt;

&lt;p&gt;大家发现，当进入无限维的时间时，很多老的观念不再适用了，一切都需要重新审视。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;所有的有限维空间都是完备的（柯西序列收敛），很多无限维空间却是不完备的（比如闭区间上的连续函数）。在这里，完备的空间有特殊的名称：完备的赋范空间叫巴拿赫空间(Banach space)，完备的内积空间叫希尔伯特空间(Hilbert space)。&lt;/li&gt;
  &lt;li&gt;在有限维空间中空间和它的对偶空间的是完全同构的，而在无限维空间中，它们存在微妙的差别。&lt;/li&gt;
  &lt;li&gt;在有限维空间中，所有线性变换（矩阵）都是有界变换，而在无限维，很多算子是无界的(unbounded)，最重要的一个例子是给函数求导。&lt;/li&gt;
  &lt;li&gt;在有限维空间中，一切有界闭集都是紧的，比如单位球。而在所有的无限维空间中，单位球都不是紧的——也就是说，可以在单位球内撒入无限个点，而不出现一个极限点。&lt;/li&gt;
  &lt;li&gt;在有限维空间中，线性变换（矩阵）的谱相当于全部的特征值，在无限维空间 中，算子的谱的结构比这个复杂得多，除了特征值组成的点谱(point spectrum)，还有approximate point spectrum和residual spectrum。虽然复杂，但是，也更为有趣。由此形成了一个相当丰富的分支——算子谱论(Spectrum theory)。&lt;/li&gt;
  &lt;li&gt;在有限维空间中，任何一点对任何一个子空间总存在投影，而在无限维空间中， 这就不一定了，具有这种良好特性的子空间有个专门的名称切比雪夫空间(Chebyshev space)。这个概念是现代逼近理论的基础(approximation theory)。函数空间的逼近理论在Learning中应该有着非常重要的作用，但是现在看到的运用现代逼近理论的文章并不多。&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;44-继续往前巴拿赫代数调和分析和李代数&quot;&gt;4.4 继续往前：巴拿赫代数，调和分析，和李代数&lt;/h4&gt;

&lt;p&gt;基本的泛函分析继续往前走，有两个重要的方向。第一个是巴拿赫代数 (Banach Algebra)，它就是在巴拿赫空间（完备的内积空间）的基础上引入乘法（这不同于数乘）。比如矩阵——它除了加法和数乘，还能做乘法——这就构成了一 个巴拿赫代数。除此以外，值域完备的有界算子，平方可积函数，都能构成巴拿赫代数。巴拿赫代数是泛函分析的抽象，很多对于有界算子导出的结论，还有算子谱 论中的许多定理，它们不仅仅对算子适用，它们其实可以从一般的巴拿赫代数中得到，并且应用在算子以外的地方。巴拿赫代数让你站在更高的高度看待泛函分析中 的结论，但是，我对它在实际问题中能比泛函分析能多带来什么东西还有待思考。&lt;/p&gt;

&lt;p&gt;最能把泛函分析和实际问题在一起的另一个重要方向是调和分析 (Harmonic Analysis)。我在这里列举它的两个个子领域，傅立叶分析和小波分析，我想这已经能说明它的实际价值。它研究的最核心的问题就是怎么用基函数去逼近 和构造一个函数。它研究的是函数空间的问题，不可避免的必须以泛函分析为基础。除了傅立叶和小波，调和分析还研究一些很有用的函数空间，比如Hardy space，Sobolev space，这些空间有很多很好的性质，在工程中和物理学中都有很重要的应用。对于vision来说，调和分析在信号的表达，图像的构造，都是非常有用的 工具。&lt;/p&gt;

&lt;p&gt;当分析和线性代数走在一起，产生了泛函分析和调和分析；当分析和群论走在一 起，我们就有了李群(Lie Group)和李代数(Lie Algebra)。它们给连续群上的元素赋予了代数结构。我一直认为这是一门非常漂亮的数学：在一个体系中，拓扑，微分和代数走到了一起。在一定条件下， 通过李群和李代数的联系，它让几何变换的结合变成了线性运算，让子群化为线性子空间，这样就为Learning中许多重要的模型和算法的引入到对几何运动 的建模创造了必要的条件。因此，我们相信李群和李代数对于vision有着重要意义，只不过学习它的道路可能会很艰辛，在它之前需要学习很多别的数学。&lt;/p&gt;

&lt;h3 id=&quot;5-现代概率论在现代分析基础上再生&quot;&gt;5 现代概率论：在现代分析基础上再生&lt;/h3&gt;

&lt;p&gt;最后，再简单说说很多Learning的研究者特别关心的数学分支：概率论。 自从Kolmogorov在上世纪30年代把测度引入概率论以来，测度理论就成为现代概率论的基础。在这里，概率定义为测度，随机变量定义为可测函数，条 件随机变量定义为可测函数在某个函数空间的投影，均值则是可测函数对于概率测度的积分。值得注意的是，很多的现代观点，开始以泛函分析的思路看待概率论的 基础概念，随机变量构成了一个向量空间，而带符号概率测度则构成了它的对偶空间，其中一方施加于对方就形成均值。角度虽然不一样，不过这两种方式殊途同 归，形成的基础是等价的。&lt;/p&gt;

&lt;p&gt;在现代概率论的基础上，许多传统的分支得到了极大丰富，最有代表性的包括鞅论 (Martingale)——由研究赌博引发的理论，现在主要用于金融（这里可以看出赌博和金融的理论联系，:-P），布朗运动(Brownian Motion)——连续随机过程的基础，以及在此基础上建立的随机分析(Stochastic Calculus)，包括随机积分（对随机过程的路径进行积分，其中比较有代表性的叫伊藤积分(Ito Integral)），和随机微分方程。对于连续几何运用建立概率模型以及对分布的变换的研究离不开这些方面的知识。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考资料：&lt;/p&gt;

  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;P.Linux’s blog，http://www.penglixun.com/study/science/mit_math_system.html&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;数据简化DataSimp(微信公众号)，https://mp.weixin.qq.com/s?__biz=MzIwMTQ4MzQwNQ==&amp;amp;mid=2653319552&amp;amp;idx=1&amp;amp;sn=f0b37a6112409204783cb691480cfa0e&amp;amp;chksm=8d3fe462ba486d74cbf8e6e5406b8f86842661d75c4b500e228f9a954c59c37337d72581d532&amp;amp;token=272736661&amp;amp;lang=zh_CN#%23&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;</content><author><name>mkDlufop</name></author><category term="math" /><summary type="html">林达华是MIT计算机科学博士，读研时以贝叶斯非参建模斩获顶会NIPS2010年最佳学生论文奖、ICCV2009和2011杰出评审员奖，现任香港中文大学教授。本文介绍其科学学习经验，约写于2011年10月，转发科学网等被大量传播至今。 [TOC] 1 为什么要深入数学的世界 作为计算机的学生，我没有任何企图要成为一个数学家。我学习数学的目的，是要 想爬上巨人的肩膀，希望站在更高的高度，能把我自己研究的东西看得更深广一些。说起来，我在刚来这个学校的时候，并没有预料到我将会有一个深入数学的旅 程。我的导师最初希望我去做的题目，是对appearance和motion建立一个unified的model。这个题目在当今Computer Vision中百花齐放的世界中并没有任何特别的地方。事实上，使用各种Graphical Model把各种东西联合在一起framework，在近年的论文中并不少见。 我不否认现在广泛流行的Graphical Model是对复杂现象建模的有力工具，但是，我认为它不是panacea，并不能取代对于所研究的问题的深入的钻研。如果统计学习包治百病，那么很多 “下游”的学科也就没有存在的必要了。事实上，开始的时候，我也是和Vision中很多人一样，想着去做一个Graphical Model——我的导师指出，这样的做法只是重复一些标准的流程，并没有很大的价值。经过很长时间的反复，另外一个路径慢慢被确立下来——我们相信，一个 图像是通过大量“原子”的某种空间分布构成的，原子群的运动形成了动态的可视过程。微观意义下的单个原子运动，和宏观意义下的整体分布的变换存在着深刻的 联系——这需要我们去发掘。 在深入探索这个题目的过程中，遇到了很多很多的问题，如何描述一个一般的运动过程，如何建立一个稳定并且广泛适用的原子表达，如何刻画微观运动和宏观分布变换的联系，还有很多。在这个过程中，我发现了两个事情： 我原有的数学基础已经远远不能适应我对这些问题的深入研究。 在数学中，有很多思想和工具，是非常适合解决这些问题的，只是没有被很多的应用科学的研究者重视。 于是，我决心开始深入数学这个浩瀚大海，希望在我再次走出来的时候，我已经有了更强大的武器去面对这些问题的挑战。 我的游历并没有结束，我的视野相比于这个博大精深的世界的依旧显得非常狭窄。在这里，我只是说说，在我的眼中，数学如何一步步从初级向高级发展，更高级别的数学对于具体应用究竟有何好处。 2 集合论：现代数学的共同基础 现代数学有数不清的分支，但是，它们都有一个共同的基础——集合论——因为 它，数学这个庞大的家族有个共同的语言。集合论中有一些最基本的概念：集合(set)，关系(relation)，函数(function)，等价 (equivalence)，是在其它数学分支的语言中几乎必然存在的。对于这些简单概念的理解，是进一步学些别的数学的基础。我相信，理工科大学生对于 这些都不会陌生。 不过，有一个很重要的东西就不见得那么家喻户晓了——那就是“选择公理” (Axiom of Choice)。这个公理的意思是“任意的一群非空集合，一定可以从每个集合中各拿出一个元素。”——似乎是显然得不能再显然的命题。不过，这个貌似平常 的公理却能演绎出一些比较奇怪的结论，比如巴拿赫-塔斯基分球定理——“一个球，能分成五个部分，对它们进行一系列刚性变换（平移旋转）后，能组合成两个一样大小的球”。正因为这些完全有悖常识的结论，导致数学界曾经在相当长时间里对于是否接受它有着激烈争论。现在，主流数学家对于它应该是基本接受的，因为很多数学分支的重要定理都依赖于它。在我们后面要回说到的学科里面，下面的定理依赖于选择公理： 拓扑学：Baire Category Theorem 实分析（测度理论）：Lebesgue 不可测集的存在性 泛函分析四个主要定理：Hahn-Banach Extension Theorem, Banach-Steinhaus Theorem (Uniform boundedness principle), Open Mapping Theorem, Closed Graph Theorem 在集合论的基础上，现代数学有两大家族：分析(Analysis)和代数(Algebra)。至于其它的，比如几何和概率论，在古典数学时代，它们是和代数并列的，但是它们的现代版本则基本是建立在分析或者代数的基础上，因此从现代意义说，它们和分析与代数并不是平行的关系。 3 分析：在极限基础上建立的宏伟大厦 3.1 微积分：分析的古典时代–从牛顿到柯西 先说说分析(Analysis)吧，它是从微积分(Caculus)发展起来 的——这也是有些微积分教材名字叫“数学分析”的原因。不过，分析的范畴远不只是这些，我们在大学一年级学习的微积分只能算是对古典分析的入门。分析研究 的对象很多，包括导数(derivatives)，积分(integral)，微分方程(differential equation)，还有级数(infinite series)——这些基本的概念，在初等的微积分里面都有介绍。如果说有一个思想贯穿其中，那就是极限——这是整个分析（不仅仅是微积分）的灵魂。 一个很多人都听说过的故事，就是牛顿(Newton)和莱布尼茨 (Leibniz)关于微积分发明权的争论。事实上，在他们的时代，很多微积分的工具开始运用在科学和工程之中，但是，微积分的基础并没有真正建立。那个 长时间一直解释不清楚的“无穷小量”的幽灵，困扰了数学界一百多年的时间——这就是“第二次数学危机”。直到柯西用数列极限的观点重新建立了微积分的基本 概念，这门学科才开始有了一个比较坚实的基础。直到今天，整个分析的大厦还是建立在极限的基石之上。 柯西(Cauchy)为分析的发展提供了一种严密的语言，但是他并没有解决微 积分的全部问题。在19世纪的时候，分析的世界仍然有着一些挥之不去的乌云。而其中最重要的一个没有解决的是“函数是否可积的问题”。我们在现在的微积分 课本中学到的那种通过“无限分割区间，取矩阵面积和的极限”的积分，是大约在1850年由黎曼(Riemann)提出的，叫做黎曼积分。但是，什么函数存 在黎曼积分呢（黎曼可积）？数学家们很早就证明了，定义在闭区间内的连续函数是黎曼可积的。可是，这样的结果并不令人满意，工程师们需要对分段连续函数的 函数积分。 3.2 实分析：在实数理论和测度理论上建立起现代分析 在19世纪中后期，不连续函数的可积性问题一直是分析的重要课题。对于定义在 闭区间上的黎曼积分的研究发现，可积性的关键在于“不连续的点足够少”。只有有限处不连续的函数是可积的，可是很多有数学家们构造出很多在无限处不连续的 可积函数。显然，在衡量点集大小的时候，有限和无限并不是一种合适的标准。在探讨“点集大小”这个问题的过程中，数学家发现实数轴——这个他们曾经以为已 经充分理解的东西——有着许多他们没有想到的特性。在极限思想的支持下，实数理论在这个时候被建立起来，它的标志是对实数完备性进行刻画的几条等价的定理 （确界定理，区间套定理，柯西收敛定理，Bolzano-Weierstrass Theorem和Heine-Borel Theorem等等）——这些定理明确表达出实数和有理数的根本区别：完备性（很不严格的说，就是对极限运算封闭）。随着对实数认识的深入，如何测量“点 集大小”的问题也取得了突破，勒贝格创造性地把关于集合的代数，和Outer content（就是“外测度”的一个雏形）的概念结合起来，建立了测度理论(Measure Theory)，并且进一步建立了以测度为基础的积分——勒贝格(Lebesgue Integral)。在这个新的积分概念的支持下，可积性问题变得一目了然。 上面说到的实数理论，测度理论和勒贝格积分，构成了我们现在称为实分析 (Real Analysis)的数学分支，有些书也叫实变函数论。对于应用科学来说，实分析似乎没有古典微积分那么“实用”——很难直接基于它得到什么算法。而且， 它要解决的某些“难题”——比如处处不连续的函数，或者处处连续而处处不可微的函数——在工程师的眼中，并不现实。但是，我认为，它并不是一种纯数学概念 游戏，它的现实意义在于为许多现代的应用数学分支提供坚实的基础。下面，我仅仅列举几条它的用处： 黎曼可积的函数空间不是完备的，但是勒贝格可积的函数空间是完备的。简单的 说，一个黎曼可积的函数列收敛到的那个函数不一定是黎曼可积的，但是勒贝格可积的函数列必定收敛到一个勒贝格可积的函数。在泛函分析，还有逼近理论中，经 常需要讨论“函数的极限”，或者“函数的级数”，如果用黎曼积分的概念，这种讨论几乎不可想像。我们有时看一些paper中提到Lp函数空间，就是基于勒 贝格积分。 勒贝格积分是傅立叶变换（这东西在工程中到处都是）的基础。很多关于信号处理的初等教材，可能绕过了勒贝格积分，直接讲点面对实用的东西而不谈它的数学基础，但是，对于深层次的研究问题——特别是希望在理论中能做一些工作——这并不是总能绕过去。 在下面，我们还会看到，测度理论是现代概率论的基础。 3.3 拓扑学： 分析从实数轴推广到一般空间–现代分析的抽象基础 随着实数理论的建立，大家开始把极限和连续推广到更一般的地方的分析。事实 上，很多基于实数的概念和定理并不是实数特有的。很多特性可以抽象出来，推广到更一般的空间里面。对于实数轴的推广，促成了点集拓扑学(Point- set Topology)的建立。很多原来只存在于实数中的概念，被提取出来，进行一般性的讨论。在拓扑学里面，有4个C构成了它的核心： Closed set（闭集合）。在现代的拓扑学的公理化体系中，开集和闭集是最基本的概念。一切从此引申。这两个概念是开区间和闭区间的推广，它们的根本地位，并不是 一开始就被认识到的。经过相当长的时间，人们才认识到：开集的概念是连续性的基础，而闭集对极限运算封闭——而极限正是分析的根基。 Continuous function （连续函数）。连续函数在微积分里面有个用epsilon-delta语言给出的定义，在拓扑学中它的定义是“开集的原像是开集的函数”。第二个定义和第 一个是等价的，只是用更抽象的语言进行了改写。我个人认为，它的第三个（等价）定义才从根本上揭示连续函数的本质——“连续函数是保持极限运算的函数” ——比如y是数列x1, x2, x3, … 的极限， 那么如果 f 是连续函数，那么 f(y) 就是 f(x1), f(x2), f(x3), …的极限。连续函数的重要性，可以从别的分支学科中进行类比。比如群论中，基础的运算是“乘法”，对于群，最重要的映射叫“同态映射”——保持“乘法”的 映射。在分析中，基础运算是“极限”，因此连续函数在分析中的地位，和同态映射在代数中的地位是相当的。 Connected set （连通集合）。比它略为窄一点的概念叫(Path connected)，就是集合中任意两点都存在连续路径相连——可能是一般人理解的概念。一般意义下的连通概念稍微抽象一些。在我看来，连通性有两个重 要的用场：一个是用于证明一般的中值定理(Intermediate Value Theorem)，还有就是代数拓扑，拓扑群论和李群论中讨论根本群(Fundamental Group)的阶。 Compact set（紧集）。Compactness似乎在初等微积分里面没有专门出现，不过有几条实数上的定理和它其实是有关系的。比如，“有界数列必然存在收敛子 列”——用compactness的语言来说就是——“实数空间中有界闭集是紧的”。它在拓扑学中的一般定义是一个听上去比较抽象的东西——“紧集的任意 开覆盖存在有限子覆盖”。这个定义在讨论拓扑学的定理时很方便，它在很多时候能帮助实现从无限到有限的转换。对于分析来说，用得更多的是它的另一种形式 ——“紧集中的数列必存在收敛子列”——它体现了分析中最重要的“极限”。Compactness在现代分析中运用极广，无法尽述。微积分中的两个重要定 理：极值定理(Extreme Value Theory)，和一致收敛定理(Uniform Convergence Theorem)就可以借助它推广到一般的形式。 从某种意义上说，点集拓扑学可以看成是关于“极限”的一般理论，它抽象于实数理论，它的概念成为几乎所有现代分析学科的通用语言，也是整个现代分析的根基所在。 3.4 微分几何：流形上的分析–在拓扑空间上引入微分结构 拓扑学把极限的概念推广到一般的拓扑空间，但这不是故事的结束，而仅仅是开 始。在微积分里面，极限之后我们有微分，求导，积分。这些东西也可以推广到拓扑空间，在拓扑学的基础上建立起来——这就是微分几何。从教学上说，微分几何 的教材，有两种不同的类型，一种是建立在古典微机分的基础上的“古典微分几何”，主要是关于二维和三维空间中的一些几何量的计算，比如曲率。还有一种是建 立在现代拓扑学的基础上，这里姑且称为“现代微分几何”——它的核心概念就是“流形”(manifold)——就是在拓扑空间的基础上加了一套可以进行微 分运算的结构。现代微分几何是一门非常丰富的学科。比如一般流形上的微分的定义就比传统的微分丰富，我自己就见过三种从不同角度给出的等价定义——这一方 面让事情变得复杂一些，但是另外一个方面它给了同一个概念的不同理解，往往在解决问题时会引出不同的思路。除了推广微积分的概念以外，还引入了很多新概 念：tangent space, cotangent space, push forward, pull back, fibre bundle, flow, immersion, submersion 等等。 近些年，流形在machine learning似乎相当时髦。但是，坦率地说，要弄懂一些基本的流形算法， 甚至“创造”一些流形算法，并不需要多少微分几何的基础。对我的研究来说，微分几何最重要的应用就是建立在它之上的另外一个分支：李群和李代数——这是数 学中两大家族分析和代数的一个漂亮的联姻。分析和代数的另外一处重要的结合则是泛函分析，以及在其基础上的调和分析。 4 代数：一个抽象的世界 4.1 关于抽象的世界 回过头来，再说说另一个大家族——代数。 如果说古典微积分是分析的入门，那么现代代数的入门点则是两个部分：线性代数(linear algebra)和基础的抽象代数(abstract algebra)——据说国内一些教材称之为近世代数。 代数——名称上研究的似乎是数，在我看来，主要研究的是运算规则。一门代数， 其实都是从某种具体的运算体系中抽象出一些基本规则，建立一个公理体系，然后在这基础上进行研究。一个集合再加上一套运算规则，就构成一个代数结构。在主 要的代数结构中，最简单的是群(Group)——它只有一种符合结合率的可逆运算，通常叫“乘法”。如果，这种运算也符合交换率，那么就叫阿贝尔群 (Abelian Group)。如果有两种运算，一种叫加法，满足交换率和结合率，一种叫乘法，满足结合率，它们之间满足分配率，这种丰富一点的结构叫做环(Ring)， 如果环上的乘法满足交换率，就叫可交换环(Commutative Ring)。如果，一个环的加法和乘法具有了所有的良好性质，那么就成为一个域(Field)。基于域，我们可以建立一种新的结构，能进行加法和数乘，就 构成了线性代数(Linear algebra)。 代数的好处在于，它只关心运算规则的演绎，而不管参与运算的对象。只要定义恰 当，完全可以让一只猫乘一只狗得到一头猪:-)。基于抽象运算规则得到的所有定理完全可以运用于上面说的猫狗乘法。当然，在实际运用中，我们还是希望用它 干点有意义的事情。学过抽象代数的都知道，基于几条最简单的规则，比如结合律，就能导出非常多的重要结论——这些结论可以应用到一切满足这些简单规则的地 方——这是代数的威力所在，我们不再需要为每一个具体领域重新建立这么多的定理。 抽象代数有在一些基础定理的基础上，进一步的研究往往分为两个流派：研究有限 的离散代数结构（比如有限群和有限域），这部分内容通常用于数论，编码，和整数方程这些地方；另外一个流派是研究连续的代数结构，通常和拓扑与分析联系在 一起（比如拓扑群，李群）。我在学习中的focus主要是后者。 4.2 线性代数：“线性”的基础地位 对于做Learning, vision, optimization或者statistics的人来说，接触最多的莫过于线性代数——这也是我们在大学低年级就开始学习的。线性代数，包括建立在它 基础上的各种学科，最核心的两个概念是向量空间和线性变换。线性变换在线性代数中的地位，和连续函数在分析中的地位，或者同态映射在群论中的地位是一样的 ——它是保持基础运算（加法和数乘）的映射。 在learning中有这样的一种倾向——鄙视线性算法，标榜非线性。也许在 很多场合下面，我们需要非线性来描述复杂的现实世界，但是无论什么时候，线性都是具有根本地位的。没有线性的基础，就不可能存在所谓的非线性推广。我们常 用的非线性化的方法包括流形和kernelization，这两者都需要在某个阶段回归线性。流形需要在每个局部建立和线性空间的映射，通过把许多局部线 性空间连接起来形成非线性；而kernerlization则是通过置换内积结构把原线性空间“非线性”地映射到另外一个线性空间，再进行线性空间中所能 进行的操作。而在分析领域，线性的运算更是无处不在，微分，积分，傅立叶变换，拉普拉斯变换，还有统计中的均值，通通都是线性的。 4.3 泛函分析：从有限维向无限维迈进 在大学中学习的线性代数，它的简单主要因为它是在有限维空间进行的，因为有 限，我们无须借助于太多的分析手段。但是，有限维空间并不能有效地表达我们的世界——最重要的，函数构成了线性空间，可是它是无限维的。对函数进行的最重 要的运算都在无限维空间进行，比如傅立叶变换和小波分析。这表明了，为了研究函数（或者说连续信号），我们需要打破有限维空间的束缚，走入无限维的函数空 间——这里面的第一步，就是泛函分析。 泛函分析(Functional Analysis)是研究的是一般的线性空间，包括有限维和无限维，但是很多东西在有限维下显得很trivial，真正的困难往往在无限维的时候出现。在 泛函分析中，空间中的元素还是叫向量，但是线性变换通常会叫作“算子”(operator)。除了加法和数乘，这里进一步加入了一些运算，比如加入范数去 表达“向量的长度”或者“元素的距离”，这样的空间叫做“赋范线性空间”(normed space)，再进一步的，可以加入内积运算，这样的空间叫“内积空间”(Inner product space)。 大家发现，当进入无限维的时间时，很多老的观念不再适用了，一切都需要重新审视。 所有的有限维空间都是完备的（柯西序列收敛），很多无限维空间却是不完备的（比如闭区间上的连续函数）。在这里，完备的空间有特殊的名称：完备的赋范空间叫巴拿赫空间(Banach space)，完备的内积空间叫希尔伯特空间(Hilbert space)。 在有限维空间中空间和它的对偶空间的是完全同构的，而在无限维空间中，它们存在微妙的差别。 在有限维空间中，所有线性变换（矩阵）都是有界变换，而在无限维，很多算子是无界的(unbounded)，最重要的一个例子是给函数求导。 在有限维空间中，一切有界闭集都是紧的，比如单位球。而在所有的无限维空间中，单位球都不是紧的——也就是说，可以在单位球内撒入无限个点，而不出现一个极限点。 在有限维空间中，线性变换（矩阵）的谱相当于全部的特征值，在无限维空间 中，算子的谱的结构比这个复杂得多，除了特征值组成的点谱(point spectrum)，还有approximate point spectrum和residual spectrum。虽然复杂，但是，也更为有趣。由此形成了一个相当丰富的分支——算子谱论(Spectrum theory)。 在有限维空间中，任何一点对任何一个子空间总存在投影，而在无限维空间中， 这就不一定了，具有这种良好特性的子空间有个专门的名称切比雪夫空间(Chebyshev space)。这个概念是现代逼近理论的基础(approximation theory)。函数空间的逼近理论在Learning中应该有着非常重要的作用，但是现在看到的运用现代逼近理论的文章并不多。 4.4 继续往前：巴拿赫代数，调和分析，和李代数 基本的泛函分析继续往前走，有两个重要的方向。第一个是巴拿赫代数 (Banach Algebra)，它就是在巴拿赫空间（完备的内积空间）的基础上引入乘法（这不同于数乘）。比如矩阵——它除了加法和数乘，还能做乘法——这就构成了一 个巴拿赫代数。除此以外，值域完备的有界算子，平方可积函数，都能构成巴拿赫代数。巴拿赫代数是泛函分析的抽象，很多对于有界算子导出的结论，还有算子谱 论中的许多定理，它们不仅仅对算子适用，它们其实可以从一般的巴拿赫代数中得到，并且应用在算子以外的地方。巴拿赫代数让你站在更高的高度看待泛函分析中 的结论，但是，我对它在实际问题中能比泛函分析能多带来什么东西还有待思考。 最能把泛函分析和实际问题在一起的另一个重要方向是调和分析 (Harmonic Analysis)。我在这里列举它的两个个子领域，傅立叶分析和小波分析，我想这已经能说明它的实际价值。它研究的最核心的问题就是怎么用基函数去逼近 和构造一个函数。它研究的是函数空间的问题，不可避免的必须以泛函分析为基础。除了傅立叶和小波，调和分析还研究一些很有用的函数空间，比如Hardy space，Sobolev space，这些空间有很多很好的性质，在工程中和物理学中都有很重要的应用。对于vision来说，调和分析在信号的表达，图像的构造，都是非常有用的 工具。 当分析和线性代数走在一起，产生了泛函分析和调和分析；当分析和群论走在一 起，我们就有了李群(Lie Group)和李代数(Lie Algebra)。它们给连续群上的元素赋予了代数结构。我一直认为这是一门非常漂亮的数学：在一个体系中，拓扑，微分和代数走到了一起。在一定条件下， 通过李群和李代数的联系，它让几何变换的结合变成了线性运算，让子群化为线性子空间，这样就为Learning中许多重要的模型和算法的引入到对几何运动 的建模创造了必要的条件。因此，我们相信李群和李代数对于vision有着重要意义，只不过学习它的道路可能会很艰辛，在它之前需要学习很多别的数学。 5 现代概率论：在现代分析基础上再生 最后，再简单说说很多Learning的研究者特别关心的数学分支：概率论。 自从Kolmogorov在上世纪30年代把测度引入概率论以来，测度理论就成为现代概率论的基础。在这里，概率定义为测度，随机变量定义为可测函数，条 件随机变量定义为可测函数在某个函数空间的投影，均值则是可测函数对于概率测度的积分。值得注意的是，很多的现代观点，开始以泛函分析的思路看待概率论的 基础概念，随机变量构成了一个向量空间，而带符号概率测度则构成了它的对偶空间，其中一方施加于对方就形成均值。角度虽然不一样，不过这两种方式殊途同 归，形成的基础是等价的。 在现代概率论的基础上，许多传统的分支得到了极大丰富，最有代表性的包括鞅论 (Martingale)——由研究赌博引发的理论，现在主要用于金融（这里可以看出赌博和金融的理论联系，:-P），布朗运动(Brownian Motion)——连续随机过程的基础，以及在此基础上建立的随机分析(Stochastic Calculus)，包括随机积分（对随机过程的路径进行积分，其中比较有代表性的叫伊藤积分(Ito Integral)），和随机微分方程。对于连续几何运用建立概率模型以及对分布的变换的研究离不开这些方面的知识。 参考资料： P.Linux’s blog，http://www.penglixun.com/study/science/mit_math_system.html 数据简化DataSimp(微信公众号)，https://mp.weixin.qq.com/s?__biz=MzIwMTQ4MzQwNQ==&amp;amp;mid=2653319552&amp;amp;idx=1&amp;amp;sn=f0b37a6112409204783cb691480cfa0e&amp;amp;chksm=8d3fe462ba486d74cbf8e6e5406b8f86842661d75c4b500e228f9a954c59c37337d72581d532&amp;amp;token=272736661&amp;amp;lang=zh_CN#%23</summary></entry></feed>